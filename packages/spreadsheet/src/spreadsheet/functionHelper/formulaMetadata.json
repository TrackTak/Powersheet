{"ARRAYFORMULA":{"header":"ARRAYFORMULA","headerDescription":"Enables array arithmetic inside.","type":"Google","parameters":"array_formula","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ARRAYFORMULA(array_formula)","values":[]}],"attributes":[]},"FILTER":{"header":"FILTER","headerDescription":"Filters the array based on boolean arrays.","type":"Filter","parameters":"range, condition1, [condition2]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FILTER(range, condition1, [condition2])","values":[]}],"attributes":[]},"ARRAY_CONSTRAIN":{"header":"ARRAY_CONSTRAIN","headerDescription":"Truncates the array to given dimensions.","type":"Array","parameters":"input_range, num_rows, num_cols","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ARRAY_CONSTRAIN(input_range, num_rows, num_cols)","values":[]}],"attributes":[]},"DATE":{"header":"DATE","headerDescription":"Calculates a date specified by year, month, day, and displays it in the cell's formatting.","type":"Date","parameters":"year, month, day","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DATE(year, month, day)","values":[]}],"attributes":[]},"DATEDIF":{"header":"DATEDIF","headerDescription":"Calculates distance between two dates, in provided unit parameter.","type":"Date","parameters":"start_date, end_date, unit","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DATEDIF(start_date, end_date, unit)","values":[]}],"attributes":[]},"DATEVALUE":{"header":"DATEVALUE","headerDescription":"Interprets string as date.","type":"Date","parameters":"date_string","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DATEVALUE(date_string)","values":[]}],"attributes":[]},"DAY":{"header":"DAY","headerDescription":"Returns the day of the given date value.","type":"Date","parameters":"date","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DAY(date)","values":[]}],"attributes":[]},"DAYS":{"header":"DAYS","headerDescription":"Calculates the difference between two date values.","type":"Date","parameters":"end_date, start_date","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DAYS(end_date, start_date)","values":[]}],"attributes":[]},"DAYS360":{"header":"DAYS360","headerDescription":"Calculates the difference between two date values in days, in 360-day basis.","type":"Date","parameters":"start_date, end_date, [method]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DAYS360(start_date, end_date, [method])","values":[]}],"attributes":[]},"EDATE":{"header":"EDATE","headerDescription":"Shifts the given startdate by given number of months.","type":"Date","parameters":"start_date, months","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EDATE(start_date, months)","values":[]}],"attributes":[]},"EOMONTH":{"header":"EOMONTH","headerDescription":"Returns the date of the last day of a month which falls months away from the start date.","type":"Date","parameters":"start_date, months","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EOMONTH(start_date, months)","values":[]}],"attributes":[]},"HOUR":{"header":"HOUR","headerDescription":"Returns hour component of given time.","type":"Date","parameters":"time","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HOUR(time)","values":[]}],"attributes":[]},"ISOWEEKNUM":{"header":"ISOWEEKNUM","headerDescription":"Returns an ISO week number that corresponds to the week of year.","type":"Date","parameters":"date","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISOWEEKNUM(date)","values":[]}],"attributes":[]},"MINUTE":{"header":"MINUTE","headerDescription":"Returns minute component of given time.","type":"Date","parameters":"time","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MINUTE(time)","values":[]}],"attributes":[]},"MONTH":{"header":"MONTH","headerDescription":"Returns the month for the given date value.","type":"Date","parameters":"date","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MONTH(date)","values":[]}],"attributes":[]},"NETWORKDAYS":{"header":"NETWORKDAYS","headerDescription":"Returns the number of working days between two given dates.","type":"Date","parameters":"start_date, end_date, [holidays]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NETWORKDAYS(start_date, end_date, [holidays])","values":[]}],"attributes":[]},"NETWORKDAYS.INTL":{"header":"NETWORKDAYS.INTL","headerDescription":"Returns the number of working days between two given dates.","type":"Date","parameters":"start_date, end_date, [weekend], [holidays]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])","values":[]}],"attributes":[]},"NOW":{"header":"NOW","headerDescription":"Returns current date + time.","type":"Date","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NOW()","values":[]}],"attributes":[]},"SECOND":{"header":"SECOND","headerDescription":"Returns second component of given time.","type":"Date","parameters":"time","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SECOND(time)","values":[]}],"attributes":[]},"TIME":{"header":"TIME","headerDescription":"Calculates time from given hour, minute and second.","type":"Date","parameters":"hour, minute, second","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TIME(hour, minute, second)","values":[]}],"attributes":[]},"TIMEVALUE":{"header":"TIMEVALUE","headerDescription":"Interprets string as time.","type":"Date","parameters":"time_string","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TIMEVALUE(time_string)","values":[]}],"attributes":[]},"TODAY":{"header":"TODAY","headerDescription":"Returns current date.","type":"Date","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TODAY()","values":[]}],"attributes":[]},"WEEKDAY":{"header":"WEEKDAY","headerDescription":"Computes a number between 1-7 representing the day of week.","type":"Date","parameters":"date, [type]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WEEKDAY(date, [type])","values":[]}],"attributes":[]},"WEEKNUM":{"header":"WEEKNUM","headerDescription":"Returns a week number that corresponds to the week of year.","type":"Date","parameters":"date, [type]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WEEKNUM(date, [type])","values":[]}],"attributes":[]},"WORKDAY":{"header":"WORKDAY","headerDescription":"Returns the working day number of days from start day.","type":"Date","parameters":"start_date, num_days, [holidays]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WORKDAY(start_date, num_days, [holidays])","values":[]}],"attributes":[]},"WORKDAY.INTL":{"header":"WORKDAY.INTL","headerDescription":"Returns the working day number of days from start day.","type":"Date","parameters":"start_date, num_days, [weekend], [holidays]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WORKDAY.INTL(start_date, num_days, [weekend], [holidays])","values":[]}],"attributes":[]},"YEAR":{"header":"YEAR","headerDescription":"Returns the year as a number according to the internal calculation rules.","type":"Date","parameters":"date","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=YEAR(date)","values":[]}],"attributes":[]},"YEARFRAC":{"header":"YEARFRAC","headerDescription":"Computes the difference between two date values, in fraction of years.","type":"Date","parameters":"start_date, end_date, [day_count_convention]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=YEARFRAC(start_date, end_date, [day_count_convention])","values":[]}],"attributes":[]},"BIN2DEC":{"header":"BIN2DEC","headerDescription":"The result is the decimal number for the binary number entered.","type":"Engineering","parameters":"signed_binary_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BIN2DEC(signed_binary_number)","values":[]}],"attributes":[]},"BIN2HEX":{"header":"BIN2HEX","headerDescription":"The result is the hexadecimal number for the binary number entered.","type":"Engineering","parameters":"signed_binary_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BIN2HEX(signed_binary_number, [significant_digits])","values":[]}],"attributes":[]},"BIN2OCT":{"header":"BIN2OCT","headerDescription":"The result is the octal number for the binary number entered.","type":"Engineering","parameters":"signed_binary_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BIN2OCT(signed_binary_number, [significant_digits])","values":[]}],"attributes":[]},"BITAND":{"header":"BITAND","headerDescription":"Returns a bitwise logical \"and\" of the parameters.","type":"Engineering","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BITAND(value1, value2)","values":[]}],"attributes":[]},"BITLSHIFT":{"header":"BITLSHIFT","headerDescription":"Shifts a number left by n bits.","type":"Engineering","parameters":"value, shift_amount","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BITLSHIFT(value, shift_amount)","values":[]}],"attributes":[]},"BITOR":{"header":"BITOR","headerDescription":"Returns a bitwise logical \"or\" of the parameters.","type":"Engineering","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BITOR(value1, value2)","values":[]}],"attributes":[]},"BITRSHIFT":{"header":"BITRSHIFT","headerDescription":"Shifts a number right by n bits.","type":"Engineering","parameters":"value, shift_amount","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BITRSHIFT(value, shift_amount)","values":[]}],"attributes":[]},"BITXOR":{"header":"BITXOR","headerDescription":"Returns a bitwise logical \"exclusive or\" of the parameters.","type":"Engineering","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BITXOR(value1, value2)","values":[]}],"attributes":[]},"COMPLEX":{"header":"COMPLEX","headerDescription":"Returns complex number from Re and Im parts.","type":"Engineering","parameters":"real_part, imaginary_part, [suffix]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COMPLEX(real_part, imaginary_part, [suffix])","values":[]}],"attributes":[]},"DEC2BIN":{"header":"DEC2BIN","headerDescription":"Returns the binary number for the decimal number entered between –512 and 511.","type":"Engineering","parameters":"decimal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DEC2BIN(decimal_number, [significant_digits])","values":[]}],"attributes":[]},"DEC2HEX":{"header":"DEC2HEX","headerDescription":"Returns the hexadecimal number for the decimal number entered.","type":"Engineering","parameters":"decimal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DEC2HEX(decimal_number, [significant_digits])","values":[]}],"attributes":[]},"DEC2OCT":{"header":"DEC2OCT","headerDescription":"Returns the octal number for the decimal number entered.","type":"Engineering","parameters":"decimal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DEC2OCT(decimal_number, [significant_digits])","values":[]}],"attributes":[]},"DELTA":{"header":"DELTA","headerDescription":"Returns TRUE (1) if both numbers are equal, otherwise returns FALSE (0).","type":"Engineering","parameters":"number1, [number2]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DELTA(number1, [number2])","values":[]}],"attributes":[]},"ERF":{"header":"ERF","headerDescription":"Returns values of the Gaussian error integral.","type":"Engineering","parameters":"lower_bound, [upper_bound]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ERF(lower_bound, [upper_bound])","values":[]}],"attributes":[]},"ERFC":{"header":"ERFC","headerDescription":"Returns complementary values of the Gaussian error integral between x and infinity.","type":"Math","parameters":"z","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ERFC(z)","values":[]}],"attributes":[]},"HEX2BIN":{"header":"HEX2BIN","headerDescription":"The result is the binary number for the hexadecimal number entered.","type":"Engineering","parameters":"signed_hexadecimal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HEX2BIN(signed_hexadecimal_number, [significant_digits])","values":[]}],"attributes":[]},"HEX2DEC":{"header":"HEX2DEC","headerDescription":"The result is the decimal number for the hexadecimal number entered.","type":"Engineering","parameters":"signed_hexadecimal_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HEX2DEC(signed_hexadecimal_number)","values":[]}],"attributes":[]},"HEX2OCT":{"header":"HEX2OCT","headerDescription":"The result is the octal number for the hexadecimal number entered.","type":"Engineering","parameters":"signed_hexadecimal_number, significant_digits","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HEX2OCT(signed_hexadecimal_number, significant_digits)","values":[]}],"attributes":[]},"IMABS":{"header":"IMABS","headerDescription":"Returns module of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMABS(number)","values":[]}],"attributes":[]},"IMAGINARY":{"header":"IMAGINARY","headerDescription":"Returns imaginary part of a complex number.","type":"Engineering","parameters":"complex_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMAGINARY(complex_number)","values":[]}],"attributes":[]},"IMARGUMENT":{"header":"IMARGUMENT","headerDescription":"Returns argument of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMARGUMENT(number)","values":[]}],"attributes":[]},"IMCONJUGATE":{"header":"IMCONJUGATE","headerDescription":"Returns conjugate of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCONJUGATE(number)","values":[]}],"attributes":[]},"IMCOS":{"header":"IMCOS","headerDescription":"Returns cosine of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCOS(number)","values":[]}],"attributes":[]},"IMCOSH":{"header":"IMCOSH","headerDescription":"Returns hyperbolic cosine of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCOSH(number)","values":[]}],"attributes":[]},"IMCOT":{"header":"IMCOT","headerDescription":"Returns cotangens of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCOT(number)","values":[]}],"attributes":[]},"IMCSC":{"header":"IMCSC","headerDescription":"Returns cosecans of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCSC(number)","values":[]}],"attributes":[]},"IMCSCH":{"header":"IMCSCH","headerDescription":"Returns hyperbolic cosecans of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMCSCH(number)","values":[]}],"attributes":[]},"IMDIV":{"header":"IMDIV","headerDescription":"Divides two complex numbers.","type":"Engineering","parameters":"dividend, divisor","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMDIV(dividend, divisor)","values":[]}],"attributes":[]},"IMEXP":{"header":"IMEXP","headerDescription":"Returns exponent of a complex number.","type":"Engineering","parameters":"exponent","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMEXP(exponent)","values":[]}],"attributes":[]},"IMLN":{"header":"IMLN","headerDescription":"Returns natural logarithm of a complex number.","type":"Math","parameters":"complex_value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMLN(complex_value)","values":[]}],"attributes":[]},"IMLOG2":{"header":"IMLOG2","headerDescription":"Returns binary logarithm of a complex number.","type":"Engineering","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMLOG2(value)","values":[]}],"attributes":[]},"IMLOG10":{"header":"IMLOG10","headerDescription":"Returns base-10 logarithm of a complex number.","type":"Engineering","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMLOG10(value)","values":[]}],"attributes":[]},"IMPOWER":{"header":"IMPOWER","headerDescription":"Returns a complex number raised to a given power.","type":"Math","parameters":"complex_base, exponent","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMPOWER(complex_base, exponent)","values":[]}],"attributes":[]},"IMPRODUCT":{"header":"IMPRODUCT","headerDescription":"Multiplies complex numbers.","type":"Engineering","parameters":"factor1, [factor2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMPRODUCT(factor1, [factor2, ..])","values":[]}],"attributes":[]},"IMREAL":{"header":"IMREAL","headerDescription":"Returns real part of a complex number.","type":"Engineering","parameters":"complex_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMREAL(complex_number)","values":[]}],"attributes":[]},"IMSEC":{"header":"IMSEC","headerDescription":"Returns secans of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSEC(number)","values":[]}],"attributes":[]},"IMSECH":{"header":"IMSECH","headerDescription":"Returns hyperbolic secans of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSECH(number)","values":[]}],"attributes":[]},"IMSIN":{"header":"IMSIN","headerDescription":"Returns sine of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSIN (number)","values":[]}],"attributes":[]},"IMSINH":{"header":"IMSINH","headerDescription":"Returns hyperbolic sine of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSINH(number)","values":[]}],"attributes":[]},"IMSQRT":{"header":"IMSQRT","headerDescription":"Returns a square root of a complex number.","type":"Math","parameters":"complex_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSQRT(complex_number)","values":[]}],"attributes":[]},"IMSUB":{"header":"IMSUB","headerDescription":"Subtracts two complex numbers.","type":"Engineering","parameters":"first_number, second_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSUB(first_number, second_number)","values":[]}],"attributes":[]},"IMSUM":{"header":"IMSUM","headerDescription":"Adds complex numbers.","type":"Engineering","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMSUM(value1, [value2, ..])","values":[]}],"attributes":[]},"IMTAN":{"header":"IMTAN","headerDescription":"Returns tangens of a complex number.","type":"Engineering","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IMTAN(number)","values":[]}],"attributes":[]},"OCT2BIN":{"header":"OCT2BIN","headerDescription":"The result is the binary number for the octal number entered.","type":"Engineering","parameters":"signed_octal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=OCT2BIN(signed_octal_number, [significant_digits])","values":[]}],"attributes":[]},"OCT2DEC":{"header":"OCT2DEC","headerDescription":"The result is the decimal number for the octal number entered.","type":"Engineering","parameters":"signed_octal_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=OCT2DEC(signed_octal_number)","values":[]}],"attributes":[]},"OCT2HEX":{"header":"OCT2HEX","headerDescription":"The result is the hexadecimal number for the octal number entered.","type":"Engineering","parameters":"signed_octal_number, [significant_digits]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=OCT2HEX(signed_octal_number, [significant_digits])","values":[]}],"attributes":[]},"ISBLANK":{"header":"ISBLANK","headerDescription":"Returns TRUE if the reference to a cell is blank.","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISBLANK(value)","values":[]}],"attributes":[]},"ISERR":{"header":"ISERR","headerDescription":"Returns TRUE if the value is error value except ","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISERR(value)","values":[]}],"attributes":[]},"ISERROR":{"header":"ISERROR","headerDescription":"Returns TRUE if the value is general error value.","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISERROR(value)","values":[]}],"attributes":[]},"ISEVEN":{"header":"ISEVEN","headerDescription":"Returns TRUE if the value is an even integer, or FALSE if the value is odd.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISEVEN(value)","values":[]}],"attributes":[]},"ISFORMULA":{"header":"ISFORMULA","headerDescription":"Checks whether referenced cell is a formula.","type":"Info","parameters":"cell","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISFORMULA(cell)","values":[]}],"attributes":[]},"ISLOGICAL":{"header":"ISLOGICAL","headerDescription":"Tests for a logical value (TRUE or FALSE).","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISLOGICAL(value)","values":[]}],"attributes":[]},"ISNA":{"header":"ISNA","headerDescription":"Returns TRUE if the value is ","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISNA(value)","values":[]}],"attributes":[]},"ISNONTEXT":{"header":"ISNONTEXT","headerDescription":"Tests if the cell contents are text or numbers, and returns FALSE if the contents are text.","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISNONTEXT(value)","values":[]}],"attributes":[]},"ISNUMBER":{"header":"ISNUMBER","headerDescription":"Returns TRUE if the value refers to a number.","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISNUMBER(value)","values":[]}],"attributes":[]},"ISODD":{"header":"ISODD","headerDescription":"Returns TRUE if the value is odd, or FALSE if the number is even.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISODD(value)","values":[]}],"attributes":[]},"ISREF":{"header":"ISREF","headerDescription":"Returns TRUE if provided value is ","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISREF(value)","values":[]}],"attributes":[]},"ISTEXT":{"header":"ISTEXT","headerDescription":"Returns TRUE if the cell contents refer to text.","type":"Info","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISTEXT(value)","values":[]}],"attributes":[]},"NA":{"header":"NA","headerDescription":"Returns ","type":"Info","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NA()","values":[]}],"attributes":[]},"CUMIPMT":{"header":"CUMIPMT","headerDescription":"Returns the cumulative interest paid on a loan between a start period and an end period.","type":"Financial","parameters":"rate, number_of_periods, present_value, first_period, last_period, end_or_beginning","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CUMIPMT(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)","values":[]}],"attributes":[]},"CUMPRINC":{"header":"CUMPRINC","headerDescription":"Returns the cumulative principal paid on a loan between a start period and an end period.","type":"Financial","parameters":"rate, number_of_periods, present_value, first_period, last_period, end_or_beginning","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CUMPRINC(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)","values":[]}],"attributes":[]},"DB":{"header":"DB","headerDescription":"Returns the depreciation of an asset for a period using the fixed-declining balance method.","type":"Financial","parameters":"cost, salvage, life, period, [month]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DB(cost, salvage, life, period, [month])","values":[]}],"attributes":[]},"DDB":{"header":"DDB","headerDescription":"Returns the depreciation of an asset for a period using the double-declining balance method.","type":"Financial","parameters":"cost, salvage, life, period, [factor]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DDB(cost, salvage, life, period, [factor])","values":[]}],"attributes":[]},"DOLLARDE":{"header":"DOLLARDE","headerDescription":"Converts a price entered with a special notation to a price displayed as a decimal number.","type":"Financial","parameters":"fractional_price, unit","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DOLLARDE(fractional_price, unit)","values":[]}],"attributes":[]},"DOLLARFR":{"header":"DOLLARFR","headerDescription":"Converts a price displayed as a decimal number to a price entered with a special notation.","type":"Financial","parameters":"decimal_price, unit","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DOLLARFR(decimal_price, unit)","values":[]}],"attributes":[]},"EFFECT":{"header":"EFFECT","headerDescription":"Calculates the effective annual interest rate from a nominal interest rate and the number of compounding periods per year.","type":"Financial","parameters":"nominal_rate, periods_per_year","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EFFECT(nominal_rate, periods_per_year)","values":[]}],"attributes":[]},"FV":{"header":"FV","headerDescription":"Returns the future value of an investment.","type":"Financial","parameters":"rate, number_of_periods, payment_amount, [present_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FV(rate, number_of_periods, payment_amount, [present_value], [end_or_beginning])","values":[]}],"attributes":[]},"FVSCHEDULE":{"header":"FVSCHEDULE","headerDescription":"Returns the future value of an investment based on a rate schedule.","type":"Financial","parameters":"principal, rate_schedule","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FVSCHEDULE(principal, rate_schedule)","values":[]}],"attributes":[]},"IPMT":{"header":"IPMT","headerDescription":"Returns the interest portion of a given loan payment in a given payment period.","type":"Financial","parameters":"rate, period, number_of_periods, present_value, [future_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])","values":[]}],"attributes":[]},"ISPMT":{"header":"ISPMT","headerDescription":"Returns the interest paid for a given period of an investment with equal principal payments.","type":"Financial","parameters":"rate, period, number_of_periods, present_value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISPMT(rate, period, number_of_periods, present_value)","values":[]}],"attributes":[]},"MIRR":{"header":"MIRR","headerDescription":"Returns modified internal value for cashflows.","type":"Financial","parameters":"cashflow_amounts, financing_rate, reinvestment_return_rate","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MIRR(cashflow_amounts, financing_rate, reinvestment_return_rate)","values":[]}],"attributes":[]},"NOMINAL":{"header":"NOMINAL","headerDescription":"Returns the nominal interest rate.","type":"Financial","parameters":"effective_rate, periods_per_year","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NOMINAL(effective_rate, periods_per_year)","values":[]}],"attributes":[]},"NPER":{"header":"NPER","headerDescription":"Returns the number of periods for an investment assuming periodic, constant payments and a constant interest rate.","type":"Financial","parameters":"rate, payment_amount, present_value, [future_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NPER(rate, payment_amount, present_value, [future_value], [end_or_beginning])","values":[]}],"attributes":[]},"NPV":{"header":"NPV","headerDescription":"Returns net present value.","type":"Financial","parameters":"discount, cashflow1, [cashflow2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NPV(discount, cashflow1, [cashflow2, ..])","values":[]}],"attributes":[]},"PDURATION":{"header":"PDURATION","headerDescription":"Returns number of periods to reach specific value.","type":"Financial","parameters":"rate, present_value, future_value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PDURATION(rate, present_value, future_value)","values":[]}],"attributes":[]},"PMT":{"header":"PMT","headerDescription":"Returns the periodic payment for a loan.","type":"Financial","parameters":"rate, number_of_periods, present_value, [future_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PMT(rate, number_of_periods, present_value, [future_value], [end_or_beginning])","values":[]}],"attributes":[]},"PPMT":{"header":"PPMT","headerDescription":"Calculates the principal portion of a given loan payment.","type":"Financial","parameters":"rate, period, number_of_periods, present_value, [future_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])","values":[]}],"attributes":[]},"PV":{"header":"PV","headerDescription":"Returns the present value of an investment.","type":"Financial","parameters":"rate, number_of_periods, payment_amount, [future_value], [end_or_beginning]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PV(rate, number_of_periods, payment_amount, [future_value], [end_or_beginning])","values":[]}],"attributes":[]},"RATE":{"header":"RATE","headerDescription":"Returns the interest rate per period of an annuity.","type":"Financial","parameters":"number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RATE(number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess])","values":[]}],"attributes":[]},"RRI":{"header":"RRI","headerDescription":"Returns an equivalent interest rate for the growth of an investment.","type":"Financial","parameters":"number_of_periods, present_value, future_value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RRI(number_of_periods, present_value, future_value)","values":[]}],"attributes":[]},"SLN":{"header":"SLN","headerDescription":"Returns the depreciation of an asset for one period, based on a straight-line method.","type":"Financial","parameters":"cost, salvage, life","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SLN(cost, salvage, life)","values":[]}],"attributes":[]},"SYD":{"header":"SYD","headerDescription":"Returns the \"sum-of-years\" depreciation for an asset in a period.","type":"Financial","parameters":"cost, salvage, life, period","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SYD(cost, salvage, life, period)","values":[]}],"attributes":[]},"TBILLEQ":{"header":"TBILLEQ","headerDescription":"Returns the bond-equivalent yield for a Treasury bill.","type":"Financial","parameters":"settlement, maturity, discount","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TBILLEQ(settlement, maturity, discount)","values":[]}],"attributes":[]},"TBILLPRICE":{"header":"TBILLPRICE","headerDescription":"Returns the price per $100 face value for a Treasury bill.","type":"Financial","parameters":"settlement, maturity, discount","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TBILLPRICE(settlement, maturity, discount)","values":[]}],"attributes":[]},"TBILLYIELD":{"header":"TBILLYIELD","headerDescription":"Returns the yield for a Treasury bill.","type":"Financial","parameters":"settlement, maturity, price","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TBILLYIELD(settlement, maturity, price)","values":[]}],"attributes":[]},"XNPV":{"header":"XNPV","headerDescription":"Returns net present value.","type":"Financial","parameters":"discount, cashflow_amounts, cashflow_dates","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=XNPV(discount, cashflow_amounts, cashflow_dates)","values":[]}],"attributes":[]},"AND":{"header":"AND","headerDescription":"Returns TRUE if all arguments are TRUE.","type":"Logical","parameters":"logical_expression1, [logical_expression2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=AND(logical_expression1, [logical_expression2, ..])","values":[]}],"attributes":[]},"FALSE":{"header":"FALSE","headerDescription":"Returns the logical value FALSE.","type":"Logical","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FALSE()","values":[]}],"attributes":[]},"IF":{"header":"IF","headerDescription":"Specifies a logical test to be performed.","type":"Logical","parameters":"logical_expression, value_if_true, value_if_false","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IF(logical_expression, value_if_true, value_if_false)","values":[]}],"attributes":[]},"IFNA":{"header":"IFNA","headerDescription":"Returns the value if the cell does not contains the ","type":"Logical","parameters":"value, value_if_na","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IFNA(value, value_if_na)","values":[]}],"attributes":[]},"IFERROR":{"header":"IFERROR","headerDescription":"Returns the value if the cell does not contains an error value, or the alternative value if it does.","type":"Logical","parameters":"value, [value_if_error]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=IFERROR(value, [value_if_error])","values":[]}],"attributes":[]},"NOT":{"header":"NOT","headerDescription":"Complements (inverts) a logical value.","type":"Logical","parameters":"logical_expression","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NOT(logical_expression)","values":[]}],"attributes":[]},"SWITCH":{"header":"SWITCH","headerDescription":"Evaluates a list of arguments, consisting of an expression followed by a value.","type":"Logical","parameters":"expression, case1, value1, [default or case2, value2], …","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SWITCH(expression, case1, value1, [default or case2, value2], …)","values":[]}],"attributes":[]},"OR":{"header":"OR","headerDescription":"Returns TRUE if at least one argument is TRUE.","type":"Logical","parameters":"logical_expression1, [logical_expression2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=OR(logical_expression1, [logical_expression2, ..])","values":[]}],"attributes":[]},"TRUE":{"header":"TRUE","headerDescription":"The logical value is set to TRUE.","type":"Logical","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TRUE()","values":[]}],"attributes":[]},"XOR":{"header":"XOR","headerDescription":"Returns true if an odd number of arguments evaluates to TRUE.","type":"Logical","parameters":"logical_expression1, [logical_expression2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=XOR(logical_expression1, [logical_expression2, ..])","values":[]}],"attributes":[]},"CHOOSE":{"header":"CHOOSE","headerDescription":"Uses an index to return a value from a list of up to 30 values.","type":"Lookup","parameters":"index, choice1, [choice2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHOOSE(index, choice1, [choice2, ..])","values":[]}],"attributes":[]},"COLUMN":{"header":"COLUMN","headerDescription":"Returns column number of a given reference or formula reference if argument not provided.","type":"Lookup","parameters":"[cell_reference]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COLUMN([cell_reference])","values":[]}],"attributes":[]},"COLUMNS":{"header":"COLUMNS","headerDescription":"Returns the number of columns in the given reference.","type":"Lookup","parameters":"range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COLUMNS(range)","values":[]}],"attributes":[]},"FORMULATEXT":{"header":"FORMULATEXT","headerDescription":"Returns a formula in a given cell as a string.","type":"Lookup","parameters":"cell","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FORMULATEXT(cell)","values":[]}],"attributes":[]},"HLOOKUP":{"header":"HLOOKUP","headerDescription":"Searches horizontally with reference to adjacent cells to the bottom.","type":"Lookup","parameters":"search_key, range, index, [is_sorted]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HLOOKUP(search_key, range, index, [is_sorted])","values":[]}],"attributes":[]},"INDEX":{"header":"INDEX","headerDescription":"Returns the content of a cell, specified by row and column number, or an optional range name.","type":"Lookup","parameters":"reference, [row], [column]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=INDEX(reference, [row], [column])","values":[]}],"attributes":[]},"MATCH":{"header":"MATCH","headerDescription":"Returns the relative position of an item in an array that matches a specified value.","type":"Lookup","parameters":"search_key, range, [search_type]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MATCH(search_key, range, [search_type])","values":[]}],"attributes":[]},"OFFSET":{"header":"OFFSET","headerDescription":"Returns the value of a cell offset by a certain number of rows and columns from a given reference point.","type":"Lookup","parameters":"cell_reference, offset_rows, offset_columns, [height], [width]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=OFFSET(cell_reference, offset_rows, offset_columns, [height], [width])","values":[]}],"attributes":[]},"ROW":{"header":"ROW","headerDescription":"Returns row number of a given reference or formula reference if argument not provided.","type":"Lookup","parameters":"[cell_reference]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROW([cell_reference])","values":[]}],"attributes":[]},"ROWS":{"header":"ROWS","headerDescription":"Returns the number of rows in the given reference.","type":"Lookup","parameters":"range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROWS(range)","values":[]}],"attributes":[]},"VLOOKUP":{"header":"VLOOKUP","headerDescription":"Searches vertically with reference to adjacent cells to the right.","type":"Lookup","parameters":"search_key, range, index, [is_sorted]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VLOOKUP(search_key, range, index, [is_sorted])","values":[]}],"attributes":[]},"ABS":{"header":"ABS","headerDescription":"Returns the absolute value of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ABS(value)","values":[]}],"attributes":[]},"ACOS":{"header":"ACOS","headerDescription":"Returns the inverse trigonometric cosine of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ACOS(value)","values":[]}],"attributes":[]},"ACOSH":{"header":"ACOSH","headerDescription":"Returns the inverse hyperbolic cosine of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ACOSH(value)","values":[]}],"attributes":[]},"ACOT":{"header":"ACOT","headerDescription":"Returns the inverse trigonometric cotangent of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ACOT(value)","values":[]}],"attributes":[]},"ACOTH":{"header":"ACOTH","headerDescription":"Returns the inverse hyperbolic cotangent of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ACOTH(value)","values":[]}],"attributes":[]},"ARABIC":{"header":"ARABIC","headerDescription":"Converts number from roman form.","type":"Text","parameters":"roman_numeral","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ARABIC(roman_numeral)","values":[]}],"attributes":[]},"ASIN":{"header":"ASIN","headerDescription":"Returns the inverse trigonometric sine of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ASIN(value)","values":[]}],"attributes":[]},"ASINH":{"header":"ASINH","headerDescription":"Returns the inverse hyperbolic sine of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ASINH(value)","values":[]}],"attributes":[]},"ATAN":{"header":"ATAN","headerDescription":"Returns the inverse trigonometric tangent of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ATAN(value)","values":[]}],"attributes":[]},"ATAN2":{"header":"ATAN2","headerDescription":"Returns the inverse trigonometric tangent of the specified x and y coordinates.","type":"Math","parameters":"x, y","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ATAN2(x, y)","values":[]}],"attributes":[]},"ATANH":{"header":"ATANH","headerDescription":"Returns the inverse hyperbolic tangent of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ATANH(value)","values":[]}],"attributes":[]},"BASE":{"header":"BASE","headerDescription":"Converts a positive integer to a specified base into a text from the numbering system.","type":"Math","parameters":"value, base, [min_length]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BASE(value, base, [min_length])","values":[]}],"attributes":[]},"CEILING":{"header":"CEILING","headerDescription":"Rounds a number up to the nearest multiple of Significance.","type":"Math","parameters":"value, [factor]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CEILING(value, [factor])","values":[]}],"attributes":[]},"CEILING.MATH":{"header":"CEILING.MATH","headerDescription":"Rounds a number up to the nearest multiple of Significance.","type":"Math","parameters":"number, [significance], [mode]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CEILING.MATH(number, [significance], [mode])","values":[]}],"attributes":[]},"CEILING.PRECISE":{"header":"CEILING.PRECISE","headerDescription":"Rounds a number up to the nearest multiple of Significance.","type":"Math","parameters":"number, [significance]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CEILING.PRECISE(number, [significance])","values":[]}],"attributes":[]},"COMBIN":{"header":"COMBIN","headerDescription":"Returns number of combinations (without repetitions).","type":"Math","parameters":"n, k","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COMBIN(n, k)","values":[]}],"attributes":[]},"COMBINA":{"header":"COMBINA","headerDescription":"Returns number of combinations (with repetitions).","type":"Math","parameters":"n, k","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COMBINA(n, k)","values":[]}],"attributes":[]},"COS":{"header":"COS","headerDescription":"Returns the cosine of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COS(angle)","values":[]}],"attributes":[]},"COSH":{"header":"COSH","headerDescription":"Returns the hyperbolic cosine of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COSH(value)","values":[]}],"attributes":[]},"COT":{"header":"COT","headerDescription":"Returns the cotangent of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COT(angle)","values":[]}],"attributes":[]},"COTH":{"header":"COTH","headerDescription":"Returns the hyperbolic cotangent of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COTH(value)","values":[]}],"attributes":[]},"COUNTUNIQUE":{"header":"COUNTUNIQUE","headerDescription":"Counts the number of unique values in a list of specified values and ranges.","type":"Math","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNTUNIQUE(value1, [value2, ..])","values":[]}],"attributes":[]},"CSC":{"header":"CSC","headerDescription":"Returns the cosecans of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CSC(angle)","values":[]}],"attributes":[]},"CSCH":{"header":"CSCH","headerDescription":"Returns the hyperbolic cosecans of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CSCH(value)","values":[]}],"attributes":[]},"DECIMAL":{"header":"DECIMAL","headerDescription":"Converts text with characters from a number system to a positive integer in the base radix given.","type":"Math","parameters":"value, base","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DECIMAL(value, base)","values":[]}],"attributes":[]},"DEGREES":{"header":"DEGREES","headerDescription":"Converts radians into degrees.","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DEGREES(angle)","values":[]}],"attributes":[]},"EVEN":{"header":"EVEN","headerDescription":"Rounds a positive number up to the next even integer and a negative number down to the next even integer.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EVEN(value)","values":[]}],"attributes":[]},"EXP":{"header":"EXP","headerDescription":"Returns constant e raised to the power of a number.","type":"Math","parameters":"exponent","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EXP(exponent)","values":[]}],"attributes":[]},"FACT":{"header":"FACT","headerDescription":"Returns a factorial of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FACT(value)","values":[]}],"attributes":[]},"FACTDOUBLE":{"header":"FACTDOUBLE","headerDescription":"Returns a double factorial of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FACTDOUBLE(value)","values":[]}],"attributes":[]},"FLOOR":{"header":"FLOOR","headerDescription":"Rounds a number down to the nearest multiple of Significance.","type":"Math","parameters":"value, [factor]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FLOOR(value, [factor])","values":[]}],"attributes":[]},"FLOOR.MATH":{"header":"FLOOR.MATH","headerDescription":"Rounds a number down to the nearest multiple of Significance.","type":"Math","parameters":"number, [significance], [mode]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FLOOR.MATH(number, [significance], [mode])","values":[]}],"attributes":[]},"FLOOR.PRECISE":{"header":"FLOOR.PRECISE","headerDescription":"Rounds a number down to the nearest multiple of Significance.","type":"Math","parameters":"number, [significance]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FLOOR.PRECISE(number, [significance])","values":[]}],"attributes":[]},"GCD":{"header":"GCD","headerDescription":"Computes greatest common divisor of numbers.","type":"Math","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GCD(value1, value2)","values":[]}],"attributes":[]},"INT":{"header":"INT","headerDescription":"Rounds a number down to the nearest integer.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=INT(value)","values":[]}],"attributes":[]},"ISO.CEILING":{"header":"ISO.CEILING","headerDescription":"Rounds a number up to the nearest multiple of Significance.","type":"Math","parameters":"number, [significance]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ISO.CEILING(number, [significance])","values":[]}],"attributes":[]},"LCM":{"header":"LCM","headerDescription":"Computes least common multiplicity of numbers.","type":"Math","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LCM(value1, value2)","values":[]}],"attributes":[]},"LN":{"header":"LN","headerDescription":"Returns the natural logarithm based on the constant e of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LN(value)","values":[]}],"attributes":[]},"LOG":{"header":"LOG","headerDescription":"Returns the logarithm of a number to the specified base.","type":"Math","parameters":"value, base","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOG(value, base)","values":[]}],"attributes":[]},"LOG10":{"header":"LOG10","headerDescription":"Returns the base-10 logarithm of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOG10(value)","values":[]}],"attributes":[]},"MOD":{"header":"MOD","headerDescription":"Returns the remainder when one integer is divided by another.","type":"Math","parameters":"dividend, divisor","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MOD(dividend, divisor)","values":[]}],"attributes":[]},"MROUND":{"header":"MROUND","headerDescription":"Rounds number to the neares multiplicity.","type":"Math","parameters":"value, factor","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MROUND(value, factor)","values":[]}],"attributes":[]},"MULTINOMIAL":{"header":"MULTINOMIAL","headerDescription":"Returns number of multiset combinations.","type":"Math","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MULTINOMIAL(value1, value2)","values":[]}],"attributes":[]},"ODD":{"header":"ODD","headerDescription":"Rounds a positive number up to the nearest odd integer and a negative number down to the nearest odd integer.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ODD(value)","values":[]}],"attributes":[]},"PI":{"header":"PI","headerDescription":"Returns 3.14159265358979, the value of the mathematical constant PI to 14 decimal places.","type":"Math","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PI()","values":[]}],"attributes":[]},"POWER":{"header":"POWER","headerDescription":"Returns a number raised to another number.","type":"Math","parameters":"base, exponent","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=POWER(base, exponent)","values":[]}],"attributes":[]},"PRODUCT":{"header":"PRODUCT","headerDescription":"Returns product of numbers.","type":"Math","parameters":"factor1, [factor2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PRODUCT(factor1, [factor2, ..])","values":[]}],"attributes":[]},"QUOTIENT":{"header":"QUOTIENT","headerDescription":"Returns integer part of a division.","type":"Math","parameters":"dividend, divisor","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=QUOTIENT(dividend, divisor)","values":[]}],"attributes":[]},"RADIANS":{"header":"RADIANS","headerDescription":"Converts degrees to radians.","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RADIANS(angle)","values":[]}],"attributes":[]},"RAND":{"header":"RAND","headerDescription":"Returns a random number between 0 and 1.","type":"Math","parameters":"","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RAND()","values":[]}],"attributes":[]},"RANDBETWEEN":{"header":"RANDBETWEEN","headerDescription":"Returns a random integer between two numbers.","type":"Math","parameters":"low, high","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RANDBETWEEN(low, high)","values":[]}],"attributes":[]},"ROMAN":{"header":"ROMAN","headerDescription":"Converts number to roman form.","type":"Text","parameters":"number, [rule_relaxation]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROMAN(number, [rule_relaxation])","values":[]}],"attributes":[]},"ROUND":{"header":"ROUND","headerDescription":"Rounds a number to a certain number of decimal places.","type":"Math","parameters":"value, [places]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROUND(value, [places])","values":[]}],"attributes":[]},"ROUNDDOWN":{"header":"ROUNDDOWN","headerDescription":"Rounds a number down, toward zero, to a certain precision.","type":"Math","parameters":"value, [places]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROUNDDOWN(value, [places])","values":[]}],"attributes":[]},"ROUNDUP":{"header":"ROUNDUP","headerDescription":"Rounds a number up, away from zero, to a certain precision.","type":"Math","parameters":"value, [places]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ROUNDUP(value, [places])","values":[]}],"attributes":[]},"SEC":{"header":"SEC","headerDescription":"Returns the secans of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SEC(angle)","values":[]}],"attributes":[]},"SECH":{"header":"SECH","headerDescription":"Returns the hyperbolic secans of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SECH(value)","values":[]}],"attributes":[]},"SERIESSUM":{"header":"SERIESSUM","headerDescription":"Evaluates series at a point.","type":"Math","parameters":"x, n, m, a","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SERIESSUM(x, n, m, a)","values":[]}],"attributes":[]},"SIN":{"header":"SIN","headerDescription":"Returns the sine of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SIN(angle)","values":[]}],"attributes":[]},"SINH":{"header":"SINH","headerDescription":"Returns the hyperbolic sine of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SINH(value)","values":[]}],"attributes":[]},"SIGN":{"header":"SIGN","headerDescription":"Returns sign of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SIGN(value)","values":[]}],"attributes":[]},"SQRT":{"header":"SQRT","headerDescription":"Returns the positive square root of a number.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SQRT(value)","values":[]}],"attributes":[]},"SQRTPI":{"header":"SQRTPI","headerDescription":"Returns sqrt of number times pi.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SQRTPI(value)","values":[]}],"attributes":[]},"SUBTOTAL":{"header":"SUBTOTAL","headerDescription":"Computes aggregation using function specified by number.","type":"Math","parameters":"function_code, range1, [range2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUBTOTAL(function_code, range1, [range2, ..])","values":[]}],"attributes":[]},"SUM":{"header":"SUM","headerDescription":"Adds all the numbers in a range of cells.","type":"Math","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUM(value1, [value2, ..])","values":[]}],"attributes":[]},"SUMIF":{"header":"SUMIF","headerDescription":"Adds the cells specified by given criteria.","type":"Math","parameters":"range, criterion, [sum_range]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMIF(range, criterion, [sum_range])","values":[]}],"attributes":[]},"SUMIFS":{"header":"SUMIFS","headerDescription":"Returns the sum of the values of cells in a range that meets multiple criteria in multiple ranges.","type":"Math","parameters":"sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ..])","values":[]}],"attributes":[]},"SUMPRODUCT":{"header":"SUMPRODUCT","headerDescription":"Multiplies corresponding elements in the given arrays, and returns the sum of those products.","type":"Array","parameters":"array1, [array2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMPRODUCT(array1, [array2, ..])","values":[]}],"attributes":[]},"SUMSQ":{"header":"SUMSQ","headerDescription":"Returns the sum of the squares of the arguments","type":"Math","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMSQ(value1, [value2, ..])","values":[]}],"attributes":[]},"SUMX2MY2":{"header":"SUMX2MY2","headerDescription":"Returns the sum of the square differences.","type":"Array","parameters":"array_x, array_y","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMX2MY2(array_x, array_y)","values":[]}],"attributes":[]},"SUMX2PY2":{"header":"SUMX2PY2","headerDescription":"Returns the sum of the square sums.","type":"Array","parameters":"array_x, array_y","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMX2PY2(array_x, array_y)","values":[]}],"attributes":[]},"SUMXMY2":{"header":"SUMXMY2","headerDescription":"Returns the sum of the square of differences.","type":"Array","parameters":"array_x, array_y","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUMXMY2(array_x, array_y)","values":[]}],"attributes":[]},"TAN":{"header":"TAN","headerDescription":"Returns the tangent of the given angle (in radians).","type":"Math","parameters":"angle","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TAN(angle)","values":[]}],"attributes":[]},"TANH":{"header":"TANH","headerDescription":"Returns the hyperbolic tangent of the given value.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TANH(value)","values":[]}],"attributes":[]},"TRUNC":{"header":"TRUNC","headerDescription":"Truncates a number by removing decimal places.","type":"Math","parameters":"value, [places]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TRUNC(value, [places])","values":[]}],"attributes":[]},"MMULT":{"header":"MMULT","headerDescription":"Calculates the array product of two arrays.","type":"Array","parameters":"matrix1, matrix2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MMULT(matrix1, matrix2)","values":[]}],"attributes":[]},"TRANSPOSE":{"header":"TRANSPOSE","headerDescription":"Transposes the rows and columns of an array.","type":"Array","parameters":"array_or_range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TRANSPOSE(array_or_range)","values":[]}],"attributes":[]},"AVEDEV":{"header":"AVEDEV","headerDescription":"Returns the average deviation of the arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=AVEDEV(value1, [value2, ..])","values":[]}],"attributes":[]},"AVERAGE":{"header":"AVERAGE","headerDescription":"Returns the average of the arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=AVERAGE(value1, [value2, ..])","values":[]}],"attributes":[]},"AVERAGEA":{"header":"AVERAGEA","headerDescription":"Returns the average of the arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=AVERAGEA(value1, [value2, ..])","values":[]}],"attributes":[]},"AVERAGEIF":{"header":"AVERAGEIF","headerDescription":"Returns the arithmetic mean of all cells in a range that satisfy a given condition.","type":"Statistical","parameters":"criteria_range, criterion, [average_range]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=AVERAGEIF(criteria_range, criterion, [average_range])","values":[]}],"attributes":[]},"BETA.DIST":{"header":"BETA.DIST","headerDescription":"Returns the denisty of Beta distribution.","type":"Statistical","parameters":"value, alpha, beta, cumulative, lower_bound, upper_bound","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BETA.DIST(value, alpha, beta, cumulative, lower_bound, upper_bound)","values":[]}],"attributes":[]},"BETADIST":{"header":"BETADIST","headerDescription":"Returns the denisty of Beta distribution.","type":"Statistical","parameters":"value, alpha, beta, lower_bound, upper_bound","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BETADIST(value, alpha, beta, lower_bound, upper_bound)","values":[]}],"attributes":[]},"BETA.INV":{"header":"BETA.INV","headerDescription":"Returns the inverse Beta distribution value.","type":"Statistical","parameters":"probability, alpha, beta, lower_bound, upper_bound","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BETA.INV(probability, alpha, beta, lower_bound, upper_bound)","values":[]}],"attributes":[]},"BETAINV":{"header":"BETAINV","headerDescription":"Returns the inverse of Beta distribution value.","type":"Statistical","parameters":"probability, alpha, beta, lower_bound, upper_bound","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BETAINV(probability, alpha, beta, lower_bound, upper_bound)","values":[]}],"attributes":[]},"BINOM.DIST":{"header":"BINOM.DIST","headerDescription":"Returns density of binomial distribution.","type":"Statistical","parameters":"num_successes, num_trials, prob_success, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BINOM.DIST(num_successes, num_trials, prob_success, cumulative)","values":[]}],"attributes":[]},"BINOMDIST":{"header":"BINOMDIST","headerDescription":"Returns density of binomial distribution.","type":"Statistical","parameters":"num_successes, num_trials, prob_success, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BINOMDIST(num_successes, num_trials, prob_success, cumulative)","values":[]}],"attributes":[]},"BINOM.INV":{"header":"BINOM.INV","headerDescription":"Returns inverse binomial distribution value.","type":"Statistical","parameters":"num_trials, prob_success, target_prob","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=BINOM.INV(num_trials, prob_success, target_prob)","values":[]}],"attributes":[]},"CHIDIST":{"header":"CHIDIST","headerDescription":"Returns probability of chi-square right-side distribution.","type":"Statistical","parameters":"x, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHIDIST(x, degrees_freedom)","values":[]}],"attributes":[]},"CHIINV":{"header":"CHIINV","headerDescription":"Returns inverse of chi-square right-side distribution.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHIINV(probability, degrees_freedom)","values":[]}],"attributes":[]},"CHISQ.DIST":{"header":"CHISQ.DIST","headerDescription":"Returns value of chi-square distribution.","type":"Statistical","parameters":"x, degrees_freedom, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHISQ.DIST(x, degrees_freedom, cumulative)","values":[]}],"attributes":[]},"CHISQ.DIST.RT":{"header":"CHISQ.DIST.RT","headerDescription":"Returns probability of chi-square right-side distribution.","type":"Statistical","parameters":"x, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHISQ.DIST.RT(x, degrees_freedom)","values":[]}],"attributes":[]},"CHISQ.INV":{"header":"CHISQ.INV","headerDescription":"Returns inverse of chi-square distribution.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHISQ.INV(probability, degrees_freedom)","values":[]}],"attributes":[]},"CHISQ.INV.RT":{"header":"CHISQ.INV.RT","headerDescription":"Returns inverse of chi-square right-side distribution.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHISQ.INV.RT(probability, degrees_freedom)","values":[]}],"attributes":[]},"CHISQ.TEST":{"header":"CHISQ.TEST","headerDescription":"Returns chisquared-test value for a dataset.","type":"Statistical","parameters":"observed_range, expected_range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHISQ.TEST(observed_range, expected_range)","values":[]}],"attributes":[]},"CHITEST":{"header":"CHITEST","headerDescription":"Returns chisquared-test value for a dataset.","type":"Statistical","parameters":"observed_range, expected_range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHITEST(observed_range, expected_range)","values":[]}],"attributes":[]},"CONFIDENCE":{"header":"CONFIDENCE","headerDescription":"Returns upper confidence bound for normal distribution.","type":"Statistical","parameters":"alpha, standard_deviation, pop_size","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CONFIDENCE(alpha, standard_deviation, pop_size)","values":[]}],"attributes":[]},"CONFIDENCE.NORM":{"header":"CONFIDENCE.NORM","headerDescription":"Returns upper confidence bound for normal distribution.","type":"Statistical","parameters":"alpha, standard_deviation, pop_size","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CONFIDENCE.NORM(alpha, standard_deviation, pop_size)","values":[]}],"attributes":[]},"CONFIDENCE.T":{"header":"CONFIDENCE.T","headerDescription":"Returns upper confidence bound for T distribution.","type":"Statistical","parameters":"alpha, standard_deviation, size","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CONFIDENCE.T(alpha, standard_deviation, size)","values":[]}],"attributes":[]},"CORREL":{"header":"CORREL","headerDescription":"Returns the correlation coefficient between two data sets.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CORREL(data_y, data_x)","values":[]}],"attributes":[]},"COUNT":{"header":"COUNT","headerDescription":"Counts how many numbers are in the list of arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNT(value1, [value2, ..])","values":[]}],"attributes":[]},"COUNTA":{"header":"COUNTA","headerDescription":"Counts how many values are in the list of arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNTA(value1, [value2, ..])","values":[]}],"attributes":[]},"COUNTBLANK":{"header":"COUNTBLANK","headerDescription":"Returns the number of empty cells.","type":"Math","parameters":"range","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNTBLANK(range)","values":[]}],"attributes":[]},"COUNTIF":{"header":"COUNTIF","headerDescription":"Returns the number of cells that meet with certain criteria within a cell range.","type":"Math","parameters":"range, criterion","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNTIF(range, criterion)","values":[]}],"attributes":[]},"COUNTIFS":{"header":"COUNTIFS","headerDescription":"Returns the count of rows or columns that meet criteria in multiple ranges.","type":"Math","parameters":"criteria_range1, criterion1, [criteria_range2, criterion2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COUNTIFS(criteria_range1, criterion1, [criteria_range2, criterion2, ..])","values":[]}],"attributes":[]},"COVAR":{"header":"COVAR","headerDescription":"Returns the covariance between two data sets, population normalized.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COVAR(data_y, data_x)","values":[]}],"attributes":[]},"COVARIANCE.P":{"header":"COVARIANCE.P","headerDescription":"Returns the covariance between two data sets, population normalized.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COVARIANCE.P(data_y, data_x)","values":[]}],"attributes":[]},"COVARIANCE.S":{"header":"COVARIANCE.S","headerDescription":"Returns the covariance between two data sets, sample normalized.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=COVARIANCE.S(data_y, data_x)","values":[]}],"attributes":[]},"CRITBINOM":{"header":"CRITBINOM","headerDescription":"Returns inverse binomial distribution value.","type":"Statistical","parameters":"num_trials, prob_success, target_prob","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CRITBINOM(num_trials, prob_success, target_prob)","values":[]}],"attributes":[]},"DEVSQ":{"header":"DEVSQ","headerDescription":"Returns sum of squared deviations.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=DEVSQ(value1, value2)","values":[]}],"attributes":[]},"EXPON.DIST":{"header":"EXPON.DIST","headerDescription":"Returns density of a exponential distribution.","type":"Statistical","parameters":"x, lambda, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EXPON.DIST(x, lambda, cumulative)","values":[]}],"attributes":[]},"EXPONDIST":{"header":"EXPONDIST","headerDescription":"Returns density of a exponential distribution.","type":"Statistical","parameters":"x, lambda, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EXPONDIST(x, lambda, cumulative)","values":[]}],"attributes":[]},"FDIST":{"header":"FDIST","headerDescription":"Returns probability of F right-side distribution.","type":"Statistical","parameters":"x, degrees_freedom1, degrees_freedom2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FDIST(x, degrees_freedom1, degrees_freedom2)","values":[]}],"attributes":[]},"FINV":{"header":"FINV","headerDescription":"Returns inverse of F right-side distribution.","type":"Statistical","parameters":"probability, degrees_freedom1, degrees_freedom2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FINV(probability, degrees_freedom1, degrees_freedom2)","values":[]}],"attributes":[]},"F.DIST":{"header":"F.DIST","headerDescription":"Returns value of F distribution.","type":"Statistical","parameters":"x, degrees_freedom1, degrees_freedom2, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=F.DIST(x, degrees_freedom1, degrees_freedom2, cumulative)","values":[]}],"attributes":[]},"F.DIST.RT":{"header":"F.DIST.RT","headerDescription":"Returns probability of F right-side distribution.","type":"Statistical","parameters":"x, degrees_freedom1, degrees_freedom2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=F.DIST.RT(x, degrees_freedom1, degrees_freedom2)","values":[]}],"attributes":[]},"F.INV":{"header":"F.INV","headerDescription":"Returns inverse of F distribution.","type":"Statistical","parameters":"probability, degrees_freedom1, degrees_freedom2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=F.INV(probability, degrees_freedom1, degrees_freedom2)","values":[]}],"attributes":[]},"F.INV.RT":{"header":"F.INV.RT","headerDescription":"Returns inverse of F right-side distribution.","type":"Statistical","parameters":"probability, degrees_freedom1, degrees_freedom2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=F.INV.RT(probability, degrees_freedom1, degrees_freedom2)","values":[]}],"attributes":[]},"FISHER":{"header":"FISHER","headerDescription":"Returns Fisher transformation value.","type":"Statistical","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FISHER(value)","values":[]}],"attributes":[]},"FISHERINV":{"header":"FISHERINV","headerDescription":"Returns inverse Fischer transformation value.","type":"Statistical","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FISHERINV(value)","values":[]}],"attributes":[]},"F.TEST":{"header":"F.TEST","headerDescription":"Returns f-test value for a dataset.","type":"Statistical","parameters":"range1, range2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=F.TEST(range1, range2)","values":[]}],"attributes":[]},"FTEST":{"header":"FTEST","headerDescription":"Returns f-test value for a dataset.","type":"Statistical","parameters":"range1, range2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FTEST(range1, range2)","values":[]}],"attributes":[]},"GAMMA":{"header":"GAMMA","headerDescription":"Returns value of Gamma function.","type":"Statistical","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMA(number)","values":[]}],"attributes":[]},"GAMMA.DIST":{"header":"GAMMA.DIST","headerDescription":"Returns density of Gamma distribution.","type":"Statistical","parameters":"x, alpha, beta, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMA.DIST(x, alpha, beta, cumulative)","values":[]}],"attributes":[]},"GAMMADIST":{"header":"GAMMADIST","headerDescription":"Returns density of Gamma distribution.","type":"Statistical","parameters":"x, alpha, beta, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMADIST(x, alpha, beta, cumulative)","values":[]}],"attributes":[]},"GAMMALN":{"header":"GAMMALN","headerDescription":"Returns natural logarithm of Gamma function.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMALN(value)","values":[]}],"attributes":[]},"GAMMALN.PRECISE":{"header":"GAMMALN.PRECISE","headerDescription":"Returns natural logarithm of Gamma function.","type":"Math","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMALN.PRECISE(value)","values":[]}],"attributes":[]},"GAMMA.INV":{"header":"GAMMA.INV","headerDescription":"Returns inverse Gamma distribution value.","type":"Statistical","parameters":"probability, alpha, beta","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMA.INV(probability, alpha, beta)","values":[]}],"attributes":[]},"GAMMAINV":{"header":"GAMMAINV","headerDescription":"Returns inverse Gamma distribution value.","type":"Statistical","parameters":"probability, alpha, beta","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAMMAINV(probability, alpha, beta)","values":[]}],"attributes":[]},"GAUSS":{"header":"GAUSS","headerDescription":"Returns the probability of gaussian variable fall more than this many times standard deviation from mean.","type":"Statistical","parameters":"z","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GAUSS(z)","values":[]}],"attributes":[]},"GEOMEAN":{"header":"GEOMEAN","headerDescription":"Returns the geometric average.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=GEOMEAN(value1, value2)","values":[]}],"attributes":[]},"HARMEAN":{"header":"HARMEAN","headerDescription":"Returns the harmonic average.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HARMEAN(value1, value2)","values":[]}],"attributes":[]},"HYPGEOMDIST":{"header":"HYPGEOMDIST","headerDescription":"Returns density of hypergeometric distribution.","type":"Statistical","parameters":"num_successes, num_draws, successes_in_pop, pop_size","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HYPGEOMDIST(num_successes, num_draws, successes_in_pop, pop_size)","values":[]}],"attributes":[]},"HYPGEOM.DIST":{"header":"HYPGEOM.DIST","headerDescription":"Returns density of hypergeometric distribution.","type":"Statistical","parameters":"num_successes, num_draws, successes_in_pop, pop_size","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=HYPGEOM.DIST(num_successes, num_draws, successes_in_pop, pop_size)","values":[]}],"attributes":[]},"LARGE":{"header":"LARGE","headerDescription":"Returns k-th largest value in a range.","type":"Statistical","parameters":"data, n","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LARGE(data, n)","values":[]}],"attributes":[]},"LOGNORM.DIST":{"header":"LOGNORM.DIST","headerDescription":"Returns density of lognormal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOGNORM.DIST(x, mean, standard_deviation)","values":[]}],"attributes":[]},"LOGNORMDIST":{"header":"LOGNORMDIST","headerDescription":"Returns density of lognormal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOGNORMDIST(x, mean, standard_deviation)","values":[]}],"attributes":[]},"LOGNORM.INV":{"header":"LOGNORM.INV","headerDescription":"Returns value of inverse lognormal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOGNORM.INV(x, mean, standard_deviation)","values":[]}],"attributes":[]},"LOGINV":{"header":"LOGINV","headerDescription":"Returns value of inverse lognormal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOGINV(x, mean, standard_deviation)","values":[]}],"attributes":[]},"MAX":{"header":"MAX","headerDescription":"Returns the maximum value in a list of arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MAX(value1, [value2, ..])","values":[]}],"attributes":[]},"MAXA":{"header":"MAXA","headerDescription":"Returns the maximum value in a list of arguments.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MAXA(value1, value2)","values":[]}],"attributes":[]},"MEDIAN":{"header":"MEDIAN","headerDescription":"Returns the median of a set of numbers.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MEDIAN(value1, [value2, ..])","values":[]}],"attributes":[]},"MIN":{"header":"MIN","headerDescription":"Returns the minimum value in a list of arguments.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MIN(value1, [value2, ..])","values":[]}],"attributes":[]},"MINA":{"header":"MINA","headerDescription":"Returns the minimum value in a list of arguments.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MINA(value1, value2)","values":[]}],"attributes":[]},"NEGBINOM.DIST":{"header":"NEGBINOM.DIST","headerDescription":"Returns density of negative binomial distribution.","type":"Statistical","parameters":"num_failures, num_successes, prob_success","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NEGBINOM.DIST(num_failures, num_successes, prob_success)","values":[]}],"attributes":[]},"NEGBINOMDIST":{"header":"NEGBINOMDIST","headerDescription":"Returns density of negative binomial distribution.","type":"Statistical","parameters":"num_failures, num_successes, prob_success","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NEGBINOMDIST(num_failures, num_successes, prob_success)","values":[]}],"attributes":[]},"NORM.DIST":{"header":"NORM.DIST","headerDescription":"Returns density of normal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORM.DIST(x, mean, standard_deviation, cumulative)","values":[]}],"attributes":[]},"NORMDIST":{"header":"NORMDIST","headerDescription":"Returns density of normal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORMDIST(x, mean, standard_deviation, cumulative)","values":[]}],"attributes":[]},"NORM.S.DIST":{"header":"NORM.S.DIST","headerDescription":"Returns density of normal distribution.","type":"Statistical","parameters":"x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORM.S.DIST(x)","values":[]}],"attributes":[]},"NORM.INV":{"header":"NORM.INV","headerDescription":"Returns value of inverse normal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORM.INV(x, mean, standard_deviation)","values":[]}],"attributes":[]},"NORMINV":{"header":"NORMINV","headerDescription":"Returns value of inverse normal distribution.","type":"Statistical","parameters":"x, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORMINV(x, mean, standard_deviation)","values":[]}],"attributes":[]},"NORM.S.INV":{"header":"NORM.S.INV","headerDescription":"Returns value of inverse normal distribution.","type":"Statistical","parameters":"x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORM.S.INV(x)","values":[]}],"attributes":[]},"NORMSINV":{"header":"NORMSINV","headerDescription":"Returns value of inverse normal distribution.","type":"Statistical","parameters":"x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=NORMSINV(x)","values":[]}],"attributes":[]},"PEARSON":{"header":"PEARSON","headerDescription":"Returns the correlation coefficient between two data sets.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PEARSON(data_y, data_x)","values":[]}],"attributes":[]},"PHI":{"header":"PHI","headerDescription":"Returns probability densitity of normal distribution.","type":"Statistical","parameters":"x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PHI(x)","values":[]}],"attributes":[]},"POISSON":{"header":"POISSON","headerDescription":"Returns density of Poisson distribution.","type":"Statistical","parameters":"x, mean, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=POISSON(x, mean, cumulative)","values":[]}],"attributes":[]},"POISSON.DIST":{"header":"POISSON.DIST","headerDescription":"Returns density of Poisson distribution.","type":"Statistical","parameters":"x, mean, [cumulative]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=POISSON.DIST(x, mean, [cumulative])","values":[]}],"attributes":[]},"RSQ":{"header":"RSQ","headerDescription":"Returns the squared correlation coefficient between two data sets.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RSQ(data_y, data_x)","values":[]}],"attributes":[]},"SKEW":{"header":"SKEW","headerDescription":"Returns skeweness of a sample.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SKEW(value1, value2)","values":[]}],"attributes":[]},"SKEW.P":{"header":"SKEW.P","headerDescription":"Returns skeweness of a population.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SKEW.P(value1, value2)","values":[]}],"attributes":[]},"SLOPE":{"header":"SLOPE","headerDescription":"Returns the slope of a linear regression line.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SLOPE(data_y, data_x)","values":[]}],"attributes":[]},"SMALL":{"header":"SMALL","headerDescription":"Returns k-th smallest value in a range.","type":"Statistical","parameters":"data, n","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SMALL(data, n)","values":[]}],"attributes":[]},"STANDARDIZE":{"header":"STANDARDIZE","headerDescription":"Returns normalized value wrt expected value and standard deviation.","type":"Statistical","parameters":"value, mean, standard_deviation","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STANDARDIZE(value, mean, standard_deviation)","values":[]}],"attributes":[]},"STDEV":{"header":"STDEV","headerDescription":"Returns standard deviation of a sample.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEV(value1, [value2, ..])","values":[]}],"attributes":[]},"STDEVA":{"header":"STDEVA","headerDescription":"Returns standard deviation of a sample.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEVA(value1, value2)","values":[]}],"attributes":[]},"STDEVP":{"header":"STDEVP","headerDescription":"Returns standard deviation of a population.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEVP(value1, value2)","values":[]}],"attributes":[]},"STDEV.P":{"header":"STDEV.P","headerDescription":"Returns standard deviation of a population.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEV.P(value1, [value2, ..])","values":[]}],"attributes":[]},"STDEVPA":{"header":"STDEVPA","headerDescription":"Returns standard deviation of a population.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEVPA(value1, value2)","values":[]}],"attributes":[]},"STDEV.S":{"header":"STDEV.S","headerDescription":"Returns standard deviation of a sample.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STDEV.S(value1, [value2, ..])","values":[]}],"attributes":[]},"STEYX":{"header":"STEYX","headerDescription":"Returns standard error for predicted of the predicted y value for each x value.","type":"Statistical","parameters":"data_y, data_x","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=STEYX(data_y, data_x)","values":[]}],"attributes":[]},"TDIST":{"header":"TDIST","headerDescription":"Returns density of Student-t distribution, both-sided or right-tailed.","type":"Statistical","parameters":"x, degrees_freedom, tails","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TDIST(x, degrees_freedom, tails)","values":[]}],"attributes":[]},"T.DIST":{"header":"T.DIST","headerDescription":"Returns density of Student-t distribution.","type":"Statistical","parameters":"x, degrees_freedom, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.DIST(x, degrees_freedom, cumulative)","values":[]}],"attributes":[]},"T.DIST.2T":{"header":"T.DIST.2T","headerDescription":"Returns density of Student-t distribution, both-sided.","type":"Statistical","parameters":"x, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.DIST.2T(x, degrees_freedom)","values":[]}],"attributes":[]},"T.DIST.RT":{"header":"T.DIST.RT","headerDescription":"Returns density of Student-t distribution, right-tailed.","type":"Statistical","parameters":"x, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.DIST.RT(x, degrees_freedom)","values":[]}],"attributes":[]},"TINV":{"header":"TINV","headerDescription":"Returns inverse Student-t distribution, both-sided.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TINV(probability, degrees_freedom)","values":[]}],"attributes":[]},"T.INV":{"header":"T.INV","headerDescription":"Returns inverse Student-t distribution.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.INV(probability, degrees_freedom)","values":[]}],"attributes":[]},"T.INV.2T":{"header":"T.INV.2T","headerDescription":"Returns inverse Student-t distribution, both-sided.","type":"Statistical","parameters":"probability, degrees_freedom","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.INV.2T(probability, degrees_freedom)","values":[]}],"attributes":[]},"TTEST":{"header":"TTEST","headerDescription":"Returns t-test value for a dataset.","type":"Statistical","parameters":"range1, range2, tails, type","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TTEST(range1, range2, tails, type)","values":[]}],"attributes":[]},"T.TEST":{"header":"T.TEST","headerDescription":"Returns t-test value for a dataset.","type":"Statistical","parameters":"range1, range2, tails, type","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T.TEST(range1, range2, tails, type)","values":[]}],"attributes":[]},"VAR":{"header":"VAR","headerDescription":"Returns variance of a sample.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VAR(value1, [value2, ..])","values":[]}],"attributes":[]},"VARA":{"header":"VARA","headerDescription":"Returns variance of a sample.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VARA(value1, value2)","values":[]}],"attributes":[]},"VARP":{"header":"VARP","headerDescription":"Returns variance of a population.","type":"Statistical","parameters":"value1, value2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VARP(value1, value2)","values":[]}],"attributes":[]},"VAR.P":{"header":"VAR.P","headerDescription":"Returns variance of a population.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VAR.P(value1, [value2, ..])","values":[]}],"attributes":[]},"VARPA":{"header":"VARPA","headerDescription":"Returns variance of a population.","type":"Statistical","parameters":"value1, value2,..","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VARPA(value1, value2,..)","values":[]}],"attributes":[]},"VAR.S":{"header":"VAR.S","headerDescription":"Returns variance of a sample.","type":"Statistical","parameters":"value1, [value2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=VAR.S(value1, [value2, ..])","values":[]}],"attributes":[]},"WEIBULL":{"header":"WEIBULL","headerDescription":"Returns density of Weibull distribution.","type":"Statistical","parameters":"x, shape, scale, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WEIBULL(x, shape, scale, cumulative)","values":[]}],"attributes":[]},"WEIBULL.DIST":{"header":"WEIBULL.DIST","headerDescription":"Returns density of Weibull distribution.","type":"Statistical","parameters":"x, shape, scale, cumulative","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=WEIBULL.DIST(x, shape, scale, cumulative)","values":[]}],"attributes":[]},"Z.TEST":{"header":"Z.TEST","headerDescription":"Returns z-test value for a dataset.","type":"Statistical","parameters":"data, value, [standard_deviation]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=Z.TEST(data, value, [standard_deviation])","values":[]}],"attributes":[]},"ZTEST":{"header":"ZTEST","headerDescription":"Returns z-test value for a dataset.","type":"Statistical","parameters":"data, value, [standard_deviation]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=ZTEST(data, value, [standard_deviation])","values":[]}],"attributes":[]},"CHAR":{"header":"CHAR","headerDescription":"Converts a number into a character according to the current code table.","type":"Text","parameters":"table_number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CHAR(table_number)","values":[]}],"attributes":[]},"CLEAN":{"header":"CLEAN","headerDescription":"Returns text that has been \"cleaned\" of line breaks and other non-printable characters.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CLEAN(text)","values":[]}],"attributes":[]},"CODE":{"header":"CODE","headerDescription":"Returns a numeric code for the first character in a text string.","type":"Text","parameters":"string","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CODE(string)","values":[]}],"attributes":[]},"CONCATENATE":{"header":"CONCATENATE","headerDescription":"Combines several text strings into one string.","type":"Text","parameters":"string1, [string2, ..]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=CONCATENATE(string1, [string2, ..])","values":[]}],"attributes":[]},"EXACT":{"header":"EXACT","headerDescription":"Returns TRUE if both text strings are exactly the same.","type":"Text","parameters":"string1, string2","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=EXACT(string1, string2)","values":[]}],"attributes":[]},"FIND":{"header":"FIND","headerDescription":"Returns the location of one text string inside another.","type":"Text","parameters":"search_for, text_to_search, [starting_at]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=FIND(search_for, text_to_search, [starting_at])","values":[]}],"attributes":[]},"LEFT":{"header":"LEFT","headerDescription":"Extracts a given number of characters from the left side of a text string.","type":"Text","parameters":"string, [number_of_characters]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LEFT(string, [number_of_characters])","values":[]}],"attributes":[]},"LEN":{"header":"LEN","headerDescription":"Returns length of a given text.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LEN(text)","values":[]}],"attributes":[]},"LOWER":{"header":"LOWER","headerDescription":"Returns text converted to lowercase.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=LOWER(text)","values":[]}],"attributes":[]},"MID":{"header":"MID","headerDescription":"Returns substring of a given length starting from Start_position.","type":"Text","parameters":"string, starting_at, extract_length","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=MID(string, starting_at, extract_length)","values":[]}],"attributes":[]},"PROPER":{"header":"PROPER","headerDescription":"Capitalizes words given text string.","type":"Text","parameters":"text_to_capitalize","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=PROPER(text_to_capitalize)","values":[]}],"attributes":[]},"REPLACE":{"header":"REPLACE","headerDescription":"Replaces substring of a text of a given length that starts at given position.","type":"Text","parameters":"text, position, length, new_text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=REPLACE(text, position, length, new_text)","values":[]}],"attributes":[]},"REPT":{"header":"REPT","headerDescription":"Repeats text a given number of times.","type":"Text","parameters":"text_to_repeat, number_of_repetitions","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=REPT(text_to_repeat, number_of_repetitions)","values":[]}],"attributes":[]},"RIGHT":{"header":"RIGHT","headerDescription":"Extracts a given number of characters from the right side of a text string.","type":"Text","parameters":"string, [number_of_characters]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=RIGHT(string, [number_of_characters])","values":[]}],"attributes":[]},"SEARCH":{"header":"SEARCH","headerDescription":"Returns the location of one text string inside another. (Allows the use of wildcards.)","type":"Text","parameters":"search_for, text_to_search, [starting_at]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SEARCH(search_for, text_to_search, [starting_at])","values":[]}],"attributes":[]},"SPLIT":{"header":"SPLIT","headerDescription":"Divides text around a specified character or string, and puts each fragment into a separate cell in the row.","type":"Text","parameters":"text, delimiter, [split_by_each], [remove_empty_text]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SPLIT(text, delimiter, [split_by_each], [remove_empty_text])","values":[]}],"attributes":[]},"SUBSTITUTE":{"header":"SUBSTITUTE","headerDescription":"Returns string where occurrences of Old_text are replaced by New_text. Replaces only specific occurrence if last parameter is provided.","type":"Text","parameters":"text_to_search, search_for, replace_with, [occurrence_number]","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=SUBSTITUTE(text_to_search, search_for, replace_with, [occurrence_number])","values":[]}],"attributes":[]},"T":{"header":"T","headerDescription":"Returns text if given value is text, empty string otherwise.","type":"Text","parameters":"value","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=T(value)","values":[]}],"attributes":[]},"TEXT":{"header":"TEXT","headerDescription":"Converts a number into text according to a given format.","type":"Text","parameters":"number, format","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TEXT(number, format)","values":[]}],"attributes":[]},"TRIM":{"header":"TRIM","headerDescription":"Strips extra spaces from text.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=TRIM(text)","values":[]}],"attributes":[]},"UNICHAR":{"header":"UNICHAR","headerDescription":"Returns the character created by using provided code point.","type":"Text","parameters":"number","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=UNICHAR(number)","values":[]}],"attributes":[]},"UNICODE":{"header":"UNICODE","headerDescription":"Returns the Unicode code point of a first character of a text.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=UNICODE(text)","values":[]}],"attributes":[]},"UPPER":{"header":"UPPER","headerDescription":"Returns text converted to uppercase.","type":"Text","parameters":"text","codeSyntaxUsage":[],"codeSyntaxElements":[{"codeSyntax":"=UPPER(text)","values":[]}],"attributes":[]}}